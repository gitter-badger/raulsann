// Generated by CoffeeScript 1.3.1
(function() {
  var log;

  log = console.log.bind(console);

  window.CanvasBrushView = Backbone.View.extend({
    className: 'bg',
    events: {
      'mouseenter': 'mouseenterEffect',
      'mousemove': 'mousemoveEffect',
      'mouseout': 'mouseoutEffect',
      'mousedown': 'mousedownEffect',
      'mouseup': 'mouseupEffect'
    },
    initialize: function() {
      var self;
      self = this;
      this.mutex = false;
      this.inside = false;
      this.canvas = this.el;
      this.canvas.clear = true;
      this.canvas.width = this.$el.parent().outerWidth(true);
      this.canvas.height = this.$el.parent().outerHeight(true);
      this.ctx = this.canvas.getContext("2d");
      this.height = this.canvas.height;
      this.width = this.canvas.width;
      this.sections = this.options.sections;
      this.color = this.sections[0][1];
      return this.brush = new sketchy(this.ctx, this.color);
    },
    mouseenterEffect: function(e) {
      this.inside = true;
      this.updatePosition(e);
      this.updateColor();
      return this.brush.strokeStart(this.x, this.y);
    },
    mousemoveEffect: function(e) {
      this.updatePosition(e);
      this.updateColor();
      if (this.inside) {
        return this.brush.stroke(this.x, this.y);
      } else {
        this.inside = true;
        return this.brush.strokeStart(this.x, this.y);
      }
    },
    mouseoutEffect: function(e) {
      this.updateColor();
      return this.brush.strokeEnd();
    },
    mousedownEffect: function(e) {
      this.brush.brush_pressure = 0;
      return this.ctx.globalCompositeOperation = 'copy';
    },
    mouseupEffect: function(e) {
      this.brush.brush_pressure = 2;
      return this.ctx.globalCompositeOperation = 'source-over';
    },
    updatePosition: function(e) {
      if (e.pageX || e.pageY) {
        this.x = e.pageX;
        return this.y = e.pageY;
      } else {
        this.x = e.clientX + document.body.scrollLeft + document.documentElement.scrollLeft;
        return this.y = e.clientY + document.body.scrollTop + document.documentElement.scrollTop;
      }
    },
    updateColor: function() {
      var s, self;
      try {
        self = this;
        s = _.find(this.sections, function(n) {
          var _ref;
          return (n['offset'][0] < (_ref = self.y) && _ref < n['offset'][1]);
        });
        this.color = s['color'];
        return this.brush.color = this.color;
      } catch (_error) {}
    },
    clean: function() {
      this.brush.destroy();
      this.ctx.clearRect(0, 0, this.width, this.height);
      return this.brush = new sketchy(this.ctx, this.color);
    }
  });

}).call(this);
